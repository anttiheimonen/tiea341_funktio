L3_Q1_2018_1
Let's review how function application is typed. Given that

f :: Int -> Bool -> String
x :: Int

what is f x

Answer: 

String                       - False

Bool -> String               - True

Int -> Bool -> String        - False

(Int -> Bool -> String) Int  - False


f x is Bool -> String. It requires a Bool as a parameter and returns a String.

------------------------


L3_Q2_2018_1

Suppose that even :: Int -> Bool. What then, is the type of

\x -> even (x+1)

Answer:

Int                 - False

Bool                - False

Int -> Bool         - True

Int -> Int -> Bool  - False


Function needs a Int and returns a Bool.

------------------------

L3_Q3_2018_1

Which are proper specializations of forall a b. (a -> b -> a) -> b -> [a] -> b?

Answer:

(Int -> Int -> Int) -> Int -> [Int] -> Int      - True
a and b can both be Int

(Int -> Bool -> Int) -> Bool -> [Int] -> Bool   - True
a become Int and b become Bool

(Int -> Bool -> Int) -> Bool -> Int -> Bool     - False
[a] needs [Int] instead od Int

(Int -> Bool -> Int) -> Int -> Bool -> Int      - False
Every a (or b) must be same type

------------------------

L3_Q4_2018_1

Why does fun work and sad doesn't?

fun :: [Double]
fun = let x = 3 in take x (repeat x)
sad :: [Double]
sad = (\x -> take x (repeat x)) 3
-- take :: Int -> [a] -> [a]
-- repeat :: a -> [a]

Answer:

The function sad has a type error (type should be a function)                - False

Function argument cannot have a forall a. type, but let-bound variable can   - False 

Function argument can have a forall a. type, but let-bound variable can't    - True

It seems that without type definition ghci shows sad-function as [Int]. So I think that 
in fun-function repeat takes 3 as Double, but take takes 3 as Int. 

------------------------

L3_Q5_2018_1

Based on what you know about polytypes, can you write a Haskell expression with the type forall a. a?

Answer:

Ei voi                                             - True

Kyllä voi, mutta sitä lauseketta ei voi laskea     - False

Kyllä voi ja voi myös laskea!                      - False

I did not get anything to work as that type. Seems too siple to do enything useful.

------------------------

L3_Q6_2018_1

Which of the types below can be given a proper implementation? (ie. aside from error, infinite recursion, etc.)

Answer: 

f :: forall a. Bool -> a            - False
This does not specify the type of a anyway. 

g :: forall a. a -> Bool            - True
Function can just return true

h :: forall a b. (b -> a) -> a      - True
This can take a a function (b -> a) as a parameter and return type a

j :: forall a b. b -> (a -> b)      - True
This can just return a function (a -> b)

------------------------
L3_Q7_2018_1

Why is it possible to implement forall a. a -> Bool but not forall a. Bool -> a?

Answer: 

Because you can always make a function that returns True for all inputs
- True

Because you can always check if the argument (of type a) is null and return True/False based on that
- False, I don't think this can be done

Function can return True if it is given an argument and False otherwise
- False, Function expect to have arguments and cannot work differently based on missing arguments. It returns another functon if only the first one of needed arguments are given. 

Anything can be converted to a Bool. E.g., 1=True and 0=False
- False. Haskell won't do this.

------------------------
L3_Q8_2018_1

We know that function with type forall a. a -> a is always an identity function. How about if the term a->a appears inside a bigger type? Must the corresponding argument/result be an identity function in the types below?

Answer:

(\ f xs -> ...) :: forall a. (a->a) -> [a] -> [a]      -- True, Argument must identify the type 

(\xs -> \x -> ...) :: forall a. [a] -> (a->a)          -- True

(\xs -> \y -> ...) :: forall a b. [b] -> (a->a)        -- True, b identifies the type 

(\xs -> \ f -> ...) ::forall a. [a] -> (a->a) -> [a]   -- False 


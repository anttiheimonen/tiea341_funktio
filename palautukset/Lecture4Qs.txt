L4_Q2_2018_2
In which languages is it possible for a polymorphic funtion to branch according to the type of the input expression?

Answer:

Java: public static int Foo<T>(T x) {...}
- True. There seems to be some ways to check the type of given input.

C#: static int Foo<T>(T x) {...}
- True. C# has Object.GetType method that returns the type.

Haskell: f :: t -> Int; f = ...
- False. Haskell cannot check the type during the run.

python: def f: ...
- True. Python has type()-function that checks the type of variable.

----------------

L4_Q5_2018_2

Based on what you know about polytypes, can you write a Haskell expression with the type forall a. a -> a?

Answer:

Ei voi - False

Kyllä voi, mutta sitä lauseketta ei voi laskea - True

Kyllä voi ja voi myös laskea! - False

Function can return the parameter it gets in.

----------------

L4_Q6_2018_2

If I have function f :: forall a. a -> a it can be:

Answer:

Stall or crash the program 
- True, It can be an infinite recursive loop

It can be a constant function, ie. function that always returns the same value
- False, the type it returns must be the same it takes in, so it cannot return the same value with every possible input.

It can be the identity function: \x->x
- True

It can change it's input in almost any imaginable way
- False - I don't think it can change input value at all.

----------------

L4_Q8_2018_2

If we know that f :: forall a. [a] -> Maybe a, but we don't know how f is implemented, what can we deduce from the following test

f "foobar" = Just 'f'

Answer:

f [1,2,3,4,5,6] == Just 1
- True, Function seems to return the first value of given list inside a Maybe, as it did with example f "foobar" = Just 'f', 

f [True,False,True,False,True,False] == Just True
- True, same logic as above

f always returns the first element of the input list
- False, We don't know what it does for empty list.

f [] == Nothing or computation of f crashes/never terminates
- True, but I'm not sure if function could return Just []. For some reason my ghci does not accept forall-lines, so I cannot try it right now. 

f [1] == Just 1
- False, the length of the list is not six this time, so we cannot know for sure if it still returns Just "first value".

